import nu.studer.gradle.jooq.JooqGenerate
import org.jooq.meta.jaxb.SchemaMappingType

plugins {
    com.seeq.build.appserver.`appserver-module`
    com.seeq.build.jooq
    kotlin("plugin.serialization")
}

description = "appserver-drivers-graph"

dependencies {
    implementation(project(":appserver:appserver-corelib"))
    implementation(project(":appserver:appserver-items"))
    implementation(project(":cache:cache-quantity-scalar"))
    implementation(project(":seeq:common-concurrent"))
    implementation("org.reflections:reflections")
    implementation("org.glassfish.grizzly:grizzly-framework")
    implementation("org.postgresql:postgresql")
    implementation("com.zaxxer:HikariCP:3.4.5")
    implementation("com.fasterxml.jackson.core:jackson-databind")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")
    implementation("com.opencsv:opencsv")
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json")

    // jOOQ used for generating SQL queries from Java code
    implementation("org.jooq:jooq-meta")
    implementation("org.jooq:jooq-codegen")
    jooqGenerator(group = "org.postgresql", name = "postgresql")
    jooqGenerator(platform(project(":seeq-platform")))
    jooqGenerator(project(":appserver:appserver-drivers-graph-custom-generator-strategy"))

    // Used for AnnotationLiteral (ReadOnlyDataSourceAnnotationLiteral, etc)
    implementation("org.glassfish.jersey.core:jersey-common")

    implementation("io.opentelemetry.instrumentation:opentelemetry-instrumentation-annotations")

    testImplementation(testFixtures(project(":appserver:appserver-corelib")))
    testImplementation(testFixtures(project(":appserver:appserver-items")))
    testImplementation(testFixtures(project(":appserver:appserver-server")))
    testImplementation(project(":appserver:appserver-compute"))
    testImplementation(project(":datasource-proxy:datasource-proxy-client"))?.because("ConnectionClient")
    testImplementation(project(":cache:cache-pipeline-quantity"))
    testImplementation(testFixtures(project(":seeq-test-utilities")))
    testImplementation("org.quartz-scheduler:quartz:2.3.2") {
        exclude(group = "com.mchange", module = "c3p0")
        exclude(group = "com.zaxxer", module = "HikariCP-java7") // We already use regular HikariCP
    }
    testImplementation("org.quartz-scheduler:quartz-jobs:2.3.2") {
        exclude(group = "com.mchange", module = "c3p0")
    }
    testImplementation("io.kotest:kotest-assertions-core-jvm")

    testFixturesApi(project(":datasource-proxy:datasource-proxy-client"))?.because("ConnectionClient")
    testFixturesApi(testFixtures(project(":appserver:appserver-server")))
    testFixturesApi(testFixtures(project(":seeq:common-monitoring")))
}

jooq {
    configurations {
        create("main") {
            jooqConfiguration.apply {
                jdbc.apply {
                    driver = "org.postgresql.Driver"
                    url = "jdbc:postgresql://localhost:34215/seeq"
                    username = "seeq"
                    // If running locally, look for the secret in sq-run-data-dir/keys/postgres_admin.key
                    password = "LetMeInPlease!"
                }
                generator.apply {
                    target.apply {
                        directory = "generated-src/main/java"
                    }
                    database.apply {
                        includes = ".*"
                        isIncludeRoutines = false
                        isIncludeSystemSequences = true // Used by consumption
                        excludes = listOf(
                            "cursors_.*",
                            "flyway_.*",
                            "temp.*", // Temporary tables generated by metadata sync
                            "metadata",
                            // Only need a couple of the views for the background stats job
                            "pg_catalog\\.(?!(pg_stat_all_tables|pg_stat_bgwriter)).*",
                        ).joinToString("|")
                        schemata.apply {
                            add(
                                SchemaMappingType().apply {
                                    inputSchema = "public"
                                },
                            )
                            add(
                                SchemaMappingType().apply {
                                    inputSchema = "audit"
                                },
                            )
                            add(
                                SchemaMappingType().apply {
                                    inputSchema = "consumption"
                                },
                            )
                            add(
                                SchemaMappingType().apply {
                                    inputSchema = "pg_catalog"
                                },
                            )
                        }
                    }
                    target.apply {
                        packageName = "com.seeq.appserver.driver.graph.entities"
                        strategy.apply {
                            name = "com.seeq.build.SeeqJooqGeneratorStrategy"
                        }
                    }
                }
            }
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs += tasks.named<JooqGenerate>("generateJooq").get().outputDir.get().asFile
        }
    }
}

coverage {
    threshold.set(0.38)
}